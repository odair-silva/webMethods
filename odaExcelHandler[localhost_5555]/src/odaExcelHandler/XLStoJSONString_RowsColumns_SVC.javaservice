package odaExcelHandler;

import com.wm.data.*;
import com.wm.util.Values;
import com.wm.app.b2b.server.Service;
import com.wm.app.b2b.server.ServiceException;
import com.ibm.icu.text.SimpleDateFormat;
import java.io.*;
import java.util.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.CellValue;
import org.apache.poi.ss.usermodel.Row.MissingCellPolicy;
import org.apache.poi.ss.usermodel.FormulaError;
import org.apache.poi.ss.usermodel.FormulaEvaluator;

public final class XLStoJSONString_RowsColumns_SVC

{

	/** 
	 * The primary method for the Java service
	 *
	 * @param pipeline
	 *            The IData pipeline
	 * @throws ServiceException
	 */
	public static final void XLStoJSONString_RowsColumns(IData pipeline) throws ServiceException {
		IDataCursor pipelineCursor = pipeline.getCursor();
		String	file_name = "";
		
		// data
		IData	data = IDataUtil.getIData( pipelineCursor, "data" );
		if ( data != null)
		{
			IDataCursor dataCursor = data.getCursor();
				file_name = IDataUtil.getString( dataCursor, "file_name" );
			dataCursor.destroy();
		}
		pipelineCursor.destroy();
		
		// pipeline
		IDataCursor pipelineCursor_1 = pipeline.getCursor();
		
		
		
		try{
			HSSFWorkbook wb = null;
			if (file_name != null)
		    	wb = new HSSFWorkbook(new FileInputStream(file_name));
		
			wb.setMissingCellPolicy(MissingCellPolicy.CREATE_NULL_AS_BLANK);
		    HSSFSheet sheet = (HSSFSheet) wb.getSheetAt(0);
		    HSSFRow row = null;
		    HSSFCell cell = null;  
		    double icl = 0;
		    
		    //pega o numero de colunas na primeira linha 
		    int cell_count = sheet.getRow(0).getPhysicalNumberOfCells() + 1;
			String[] column_name = new String[cell_count];
			
		    row = sheet.getRow(0);
		    
		    //pula a primeira celula
		    for (int k = 1; k < cell_count; k++)
		    {
		         cell = row.getCell((short)k);
		         column_name[k] = cell.getStringCellValue();
		    }
		
		    int	row_cnt = sheet.getPhysicalNumberOfRows();
		    
		    String[] row_name = new String[row_cnt];
		    
		    for (int k = 1; k < row_cnt; k++){
		    	 row = sheet.getRow(k);	
		         cell = row.getCell((short)0);
				 row_name[k] = cell.getStringCellValue();	
		    }
		    
		    String JSONoutput = new String();
		    FormulaEvaluator evaluator = wb.getCreationHelper().createFormulaEvaluator();
		 
		    if(row_cnt > 2){
				JSONoutput = "[";
			}
				    
		    for (int j = 1; j < row_cnt; j++){
		    
		    	row = sheet.getRow(j);
		    	JSONoutput = JSONoutput.concat("{\""+row_name[j]+"\": {");
		    	for(int k = 1; k < cell_count; k++){
		    		
					cell = row.getCell((short)k);
					
					CellType type = cell.getCellType();
					    
				    //Problemas: nao le datas
			    		
						switch (type){
						
							case NUMERIC: //numeric (FUNCIONA)
							icl = cell.getNumericCellValue();
			        		if (isCellDateFormatted(cell))
			        		{
			            		// format in form of M/D/YY
			            		Calendar cal = Calendar.getInstance();
			            		cal.setTime(getJavaDate(icl,false));
			            		String pattern = "dd/MM/yyy";
			            		SimpleDateFormat df = new SimpleDateFormat(pattern);
			            		String dateStr = df.format(cal.getTime());
			            		
			            		if(k < cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \""+dateStr+"\",");
					    		}
					    		if(k == cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \""+dateStr+"\"}");
					    		}
			
			        		}
			        		else{
			               		if(k < cell_count - 1){
			               			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \""+Double.toString((cell.getNumericCellValue()))+"\",");
			               			
					    		}
					    		if(k == cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \""+Double.toString((cell.getNumericCellValue()))+"\"}");
					    			
					    		}
			        		}
			        		
			        		break;
					    	
							case STRING: //string (FUNCIONA)
								if(k < cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \""+cell.getStringCellValue()+"\",");
								}
					    		if(k == cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \""+cell.getStringCellValue()+"\"}");
					    		}
					    	break;
					
							case FORMULA: //formula	 (FUNCIONA)		
								switch(cell.getCachedFormulaResultType()){
									case ERROR:
										String error = FormulaError.forInt(cell.getErrorCellValue()).getString();
										if(k < cell_count - 1){
					               			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \""+error+"\",");
							    		}
							    		if(k == cell_count - 1){
							    			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \""+error+"\"}");
							    		}
									break;
									
									case NUMERIC:
										if(k < cell_count - 1){
					               			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \""+Double.toString((cell.getNumericCellValue()))+"\",");
					               			
							    		}
							    		if(k == cell_count - 1){
							    			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \""+Double.toString((cell.getNumericCellValue()))+"\"}");
							    			
							    		}
									break;
								
									default:
									break;
								}
								
			
					        break;
					    	
							case BLANK: //blank (FUNCIONA se n\u00E3o for primeira ou ultima coluna)
								
								if(k < cell_count - 1){				
											JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \"  \",");
								}
								if(k == cell_count - 1){
											JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \"  \"}");
								}
							break;
						
							case BOOLEAN: //boolean (FUNCIONA)
					    		if(k < cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \""+cell.getBooleanCellValue()+"\",");
					    		}
					    		if(k == cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \""+cell.getBooleanCellValue()+"\"}");
					    		}
							break;
							
							case ERROR: //
								
								if(k < cell_count - 1){
									JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \" ERRO \",");
					    		}
					    		if(k == cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+column_name[k]+"\" : \" ERRO \"}");
					    		}
								
					    	break;
					
							default:
								
							break;
						}
		    	}
				    	
		    	if(j < row_cnt - 1){
		    		JSONoutput = JSONoutput.concat("},");
		    	}
		    }
			
				    
		    JSONoutput = JSONoutput.concat("}");
		    if(row_cnt > 2){
				JSONoutput = JSONoutput.concat("]");
			}
				    	
			    IDataUtil.put( pipelineCursor_1, "saida", JSONoutput );
			
			pipelineCursor_1.destroy(); 
			
		}catch (Exception e)
		{
			e.printStackTrace();
		}		
	}
	
	// --- <<IS-BEGIN-SHARED-SOURCE-AREA>> ---
	
	private static final long   DAY_MILLISECONDS  = 24 * 60 * 60 * 1000;
	
	public static boolean isValidExcelDate(double value)
	{
	    return (value > -Double.MIN_VALUE);
	}
	
	//////////////////////////////////////////////////////////////////
	// method to determine if the cell is a date, versus a number...
	public static boolean isCellDateFormatted(HSSFCell cell) {
	
		boolean bDate = false;
	
		double d = cell.getNumericCellValue();
		if ( isValidExcelDate(d) ) {
			HSSFCellStyle style = cell.getCellStyle();
			int i = style.getDataFormat();
	
			switch(i) {
				// Internal Date Formats as described on page 427 in Microsoft Excel Dev's Kit...
				case 0x0e:
				case 0x0f:
				case 0x10:
				case 0x11:
				case 0x12:
				case 0x13:
				case 0x14:
				case 0x15:
				case 0x16:
				case 0x2d:
				case 0x2e:
				case 0x2f:
				case 0xb2:
				bDate = true;
				break;
				
				default:
				bDate = false;
				break;
				}
		}
		
		return bDate;
	}
	
	public static Date getJavaDate(double date, boolean use1904windowing) {
	    if (isValidExcelDate(date)) {
	        int startYear = 1900;
	        int dayAdjust = -1; // Excel thinks 2/29/1900 is a valid date, which it isn't
	        int wholeDays = (int)Math.floor(date);
	        if (use1904windowing) {
	            startYear = 1904;
	            dayAdjust = 1; // 1904 date windowing uses 1/2/1904 as the first day
	        }
	        else if (wholeDays < 61) {
	            // Date is prior to 3/1/1900, so adjust because Excel thinks 2/29/1900 exists
	            // If Excel date == 2/29/1900, will become 3/1/1900 in Java representation
	            dayAdjust = 0;
	        }
	        GregorianCalendar calendar = new GregorianCalendar(startYear,0, wholeDays + dayAdjust);
	        int millisecondsInDay = (int)((date - Math.floor(date)) * (double) DAY_MILLISECONDS + 0.5);
	        calendar.set(GregorianCalendar.MILLISECOND, millisecondsInDay);
	        return calendar.getTime();
	    }
	    else {
	        return null;
	    }
	}
		
	
	// --- <<IS-END-SHARED-SOURCE-AREA>> ---

	/**
	 * The service implementations given below are read-only and show only the
	 * method definitions and not the complete implementation.
	 */
	public static final void XLStoJSONString_Rows(IData pipeline) throws ServiceException {
	}

	final static XLStoJSONString_RowsColumns_SVC _instance = new XLStoJSONString_RowsColumns_SVC();

	static XLStoJSONString_RowsColumns_SVC _newInstance() { return new XLStoJSONString_RowsColumns_SVC(); }

	static XLStoJSONString_RowsColumns_SVC _cast(Object o) { return (XLStoJSONString_RowsColumns_SVC)o; }

}