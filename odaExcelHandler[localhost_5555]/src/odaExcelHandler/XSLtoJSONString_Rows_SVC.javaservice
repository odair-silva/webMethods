package odaExcelHandler;

import com.wm.data.*;
import com.wm.util.Values;
import com.wm.app.b2b.server.Service;
import com.wm.app.b2b.server.ServiceException;
import com.ibm.icu.text.SimpleDateFormat;
import java.io.*;
import java.util.*;
import org.apache.poi.hssf.usermodel.*;

public final class XSLtoJSONString_Rows_SVC

{

	/** 
	 * The primary method for the Java service
	 *
	 * @param pipeline
	 *            The IData pipeline
	 * @throws ServiceException
	 */
	public static final void XSLtoJSONString_Rows(IData pipeline) throws ServiceException {
		IDataCursor pipelineCursor = pipeline.getCursor();
		String	file_name = "";
		
		// data
		IData	data = IDataUtil.getIData( pipelineCursor, "data" );
		if ( data != null)
		{
			IDataCursor dataCursor = data.getCursor();
				file_name = IDataUtil.getString( dataCursor, "file_name" );
			dataCursor.destroy();
		}
		String	format = IDataUtil.getString( pipelineCursor, "format" );
		pipelineCursor.destroy();
		
		// pipeline
		IDataCursor pipelineCursor_1 = pipeline.getCursor();
		
		try{
			HSSFWorkbook wb = null;
			if (file_name != null)
		    	wb = new HSSFWorkbook(new FileInputStream(file_name));
		
		    HSSFSheet sheet = wb.getSheetAt(0);
		    HSSFRow row = null;
		    HSSFCell cell = null;
		    String cl = "";
		    
		    
		    //pega o numero de colunas na primeira linha e guarda os valores
		    //do cabe\u00E7alho
		    int cell_count = sheet.getRow(0).getPhysicalNumberOfCells();
			String[] field_name = new String[cell_count];
		    
		    row = sheet.getRow(0);
		    
		    for (int k = 0; k < cell_count; k++)
		    {
		         cell = row.getCell((short)k);
		         field_name[k] = build_name(cell.getStringCellValue());	
		    }
		    
		    int	row_cnt = sheet.getPhysicalNumberOfRows();
		    String JSONoutput = new String();
		 
			    if(row_cnt > 2){
					JSONoutput = "[";
				}
				    
				    for (int j = 0; j < row_cnt - 1; j++){
				    
				    	row = sheet.getRow(j+1);
				    	JSONoutput = JSONoutput.concat("{\"Linha "+ j +"\": {");
				    	for(int k = 0; k < cell_count; k++){
				    		
				    		cell = row.getCell((short)k);
						    int type = cell.getCellType();
		
				    		//Numeric:0,String:1,Formula:2,Blank:3,Boolean:4,Error:5
		
							switch (type){
							case 0: //numeric (FUNCIONA)
		                   		if(k < cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+field_name[k]+"\" : \""+Double.toString((cell.getNumericCellValue()))+"\",");
					    		}
					    		if(k == cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+field_name[k]+"\" : \""+Double.toString((cell.getNumericCellValue()))+"\"");
					    		}
					    	break;
					    	
							case 1: //string (FUNCIONA)
								if(k < cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+field_name[k]+"\" : \""+build_name(cell.getStringCellValue())+"\",");
					    		}
					    		if(k == cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+field_name[k]+"\" : \""+build_name(cell.getStringCellValue())+"\"");
					    		}
					    	break;
		
							case 2: //formula		
				            	if(k < cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+field_name[k]+"\" : \""+Double.toString((cell.getNumericCellValue()))+"\",");
					    		}
					    		if(k == cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+field_name[k]+"\" : \""+Double.toString((cell.getNumericCellValue()))+"\"");
					    		}
				                break;
					    	
							case 3: //blank (FUNCIONA)
					    		if(k < cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+field_name[k]+"\" : \""+" "+"\",");
					    		}
					    		if(k == cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+field_name[k]+"\" : \""+" "+"\"");
					    		}
					    	break;
					    	
							case 4: //boolean (FUNCIONA)
					    		if(k < cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+field_name[k]+"\" : \""+cell.getBooleanCellValue()+"\",");
					    		}
					    		if(k == cell_count - 1){
					    			JSONoutput = JSONoutput.concat("\""+field_name[k]+"\" : \""+cell.getBooleanCellValue()+"\"");
					    		}
					    	break;
					    	
							case 5: //error
					    	break;
					    	
					    	default:
					    	break;
						    	
							}
				    	}
				    	
				    	if(j < row_cnt - 2){
				    		JSONoutput = JSONoutput.concat("}},");
				    	}
				    }
				    
			    JSONoutput = JSONoutput.concat("}}");
			    if(row_cnt > 2){
					JSONoutput = JSONoutput.concat("]");
				}
				    	
		    IDataUtil.put( pipelineCursor, "saida", JSONoutput );
			
			pipelineCursor.destroy(); 
		}catch (Exception e)
		{
			e.printStackTrace();
		}		
	}
	
	// --- <<IS-BEGIN-SHARED-SOURCE-AREA>> ---
	
	
	
	public static String build_name(String str)
	{
	  String name = "";
	  StringTokenizer strtok = new StringTokenizer(str," ");
	  String temp = "";
	  int count = 0;
	  while (strtok.hasMoreElements())
	  {
	    temp = (String)strtok.nextElement();
	    if (count == 0)
	        name = temp;
	    else name += "_"+temp;
	
	    count++;
	  }
	  return name;
	}
	
		
	
	// --- <<IS-END-SHARED-SOURCE-AREA>> ---

	final static XSLtoJSONString_Rows_SVC _instance = new XSLtoJSONString_Rows_SVC();

	static XSLtoJSONString_Rows_SVC _newInstance() { return new XSLtoJSONString_Rows_SVC(); }

	static XSLtoJSONString_Rows_SVC _cast(Object o) { return (XSLtoJSONString_Rows_SVC)o; }

}